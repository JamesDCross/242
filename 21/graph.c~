#include <stdio.h>
#include <stdlib.h>
#include "graph.h"
#include "mylib.h"
#include "queue.h"


/**
 * Vertex datatype.
 * 
 */
struct vertex{
    int predecessor;
    int distance;
    state_t state;
    int finish;
};


/**
 * Graph datatype.
 * 
 */
struct graphrec{
   int **edges;  
   int size;
   struct vertex *vertices;
   
};





/**
 * Creates a new graph by assigning memory to components, initialising
   the adjacency matrix with zeroes and setting the vertices to their 
   initial state.
 * 
 * 
 * @param v how many vertices the graph will have(graph size).
 * @return g return a graph with no edges. 
 */

graph graph_new(int numOfvertices){
    int i,j;
   
    /*create the graph struct*/
    graph g = emalloc(sizeof *g);
    /*set size of graph to amount of vertices*/
    g->size = numOfvertices;
    /*memory alloc to vertices struct*/
   
    g->vertices = emalloc(g->size*sizeof g->vertices[0]);

    /*adjacency array allocation*/
   
    g->edges = emalloc(g->size*sizeof g->edges[0]);

    /*initialize edges*/
    for(i=0; i<g->size; i++){
        g->edges[i] = emalloc(g->size*sizeof g->edges[0][0]);
        for(j = 0; j < g->size;j++){	
            g->edges[i][j] = 0;
        }
    }
   
    /*initialize vertices*/
    for(i=0; i<g->size; i++){
	  
      
	 
        g->vertices[i].predecessor = -1;
        g->vertices[i].distance = -1;
        g->vertices[i].state = UNVISITED;
        g->vertices[i].finish = 0;
      
    }
    return g;
}




/**
 * Adds an edge from vertices u to v (for directed graphs).
 *
 * @param g the graph requiring edges.
 * @param u first vertex.
 * @param v second vertex.
 */
void graph_directional_edge(graph g, int u, int v){
   g->edges[u][v] = 1;
}

/**
 * Adds bidirectional edges from vertices u to v (for undirected graphs).
 *
 * @param g  the graph requiring edges.
 * @param u  first vertex.
 * @param v  second vertex.
 */
void graph_bidirectional_edges(graph g, int u, int v){
   g->edges[u][v] = 1;
   g->edges[v][u] = 1;
}

/**
 * Frees the memory the graph was using.
 *
 * @param g the graph to free memory from.
 */
void graph_free(graph g){
   int i;
   for(i=0; i<g->size; i++){
      free(g->edges[i]);
   }
   free(g->edges);
   free(g->vertices);
   free(g);
}

/**
 * Prints the graph (as if it where an adjaceny list).
 *
 * @param g the graph to be printed.
 */
 
void graph_print(graph g){
   int i,j,k;
   
   printf("adjacency list:\n");
   for(i=0; i<g->size; i++){
      k = 0;
      printf("%d | ",i);
      for (j=0; j<g->size; j++){
         if (g->edges[i][j] == 1){
            if (k==0){
      
            printf("%d",j);
            k++;
            }
            else{
               printf(", %d",j);
            }
         }
      }
      printf("\n");
   }
   printf("vertex distance pred\n");
   for(i=0; i<g->size; i++){
       printf("%5d%8d%5d\n",i,g->vertices[i].distance,g->vertices[i].predecessor);
      
   }
}

/**
 * Performs a breadth first search on the input graph.
 *
 * @param g the graph to be searched.
   @param source the vertex we find distances from.
 */
void graph_bfs(graph g, int source){
   int v,u;
     
   queue q = queue_new(g->size);
   /*for each vertex in the graph*/
   for (u=0; u<g->size; u++){
	   /*set state as unvisited*/
      g->vertices[u].state = UNVISITED;
	  /*set distance to infinity*/
      g->vertices[u].distance = -1;
	  /*set predecessor as non-existent (predecessors start at 0 so use -1)*/
      g->vertices[u].predecessor = -1;
   }
   /*set source's state to visited_self*/
   g->vertices[source].state = VISITED_SELF;
   /*set source's distance as 0*/
   g->vertices[source].distance = 0;
   /*add source to the queue*/
   enqueue(q, source);
   /*while queue is not empty*/
   while (!queue_size(q)==0){/*check queue imp*/
   /*while(!(queue_size(q) == 0)){*/
       /*set vertex u to be a vertex removed from queue*/
      u = dequeue(q);
      
      for (v=0;v<g->size;v++){
          /*for each vertex v adjacent to u, that has not been visited*/
         if((g->edges[u][v] == 1)&&(g->vertices[v].state == UNVISITED)){
             /*set its state to process of being visited*/
            g->vertices[v].state = VISITED_SELF;
            /*set its distance to be 1 + the distance to u*/
            g->vertices[v].distance = 1+g->vertices[u].distance;
			/*set its predecessor to u*/
            g->vertices[v].predecessor = u;
			/*add v to queue*/
            enqueue(q,v);
         }
		 /*set u's state to visited_descendants*/
         g->vertices[u].state = VISITED_DESCENDANTS;
      }
   }
  
  queue_free(q); 
}
